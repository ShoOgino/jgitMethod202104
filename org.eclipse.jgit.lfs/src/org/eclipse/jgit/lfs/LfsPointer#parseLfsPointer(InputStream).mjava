	/**
	 * Try to parse the data provided by an InputStream to the format defined by
	 * {@link #VERSION}. If the given stream supports mark and reset as
	 * indicated by {@link InputStream#markSupported()}, its input position will
	 * be reset if the stream content is not actually a LFS pointer (i.e., when
	 * {@code null} is returned). If the stream content is an invalid LFS
	 * pointer or the given stream does not support mark/reset, the input
	 * position may not be reset.
	 *
	 * @param in
	 *            the {@link java.io.InputStream} from where to read the data
	 * @return an {@link org.eclipse.jgit.lfs.LfsPointer} or {@code null} if the
	 *         stream was not parseable as LfsPointer
	 * @throws java.io.IOException
	 */
	@Nullable
	public static LfsPointer parseLfsPointer(InputStream in)
			throws IOException {
		if (in.markSupported()) {
			return parse(in);
		}
		// Fallback; note that while parse() resets its input stream, that won't
		// reset "in".
		return parse(new BufferedInputStream(in));
	}

