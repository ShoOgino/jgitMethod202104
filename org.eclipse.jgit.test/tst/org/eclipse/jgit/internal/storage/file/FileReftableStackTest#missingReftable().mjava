	@SuppressWarnings({ "resource", "unused" })
	@Test
	public void missingReftable() throws Exception {
		try (FileReftableStack stack = new FileReftableStack(
				new File(reftableDir, "refs"), reftableDir, null,
				() -> new Config())) {
			outer: for (int i = 0; i < 10; i++) {
				final long next = stack.getMergedReftable().maxUpdateIndex()
						+ 1;
				String name = String.format("branch%d", Integer.valueOf(i));
				Ref r = newRef(name, ObjectId.zeroId());
				boolean ok = stack.addReftable(rw -> {
					rw.setMinUpdateIndex(next).setMaxUpdateIndex(next).begin()
							.writeRef(r);
				});
				assertTrue(ok);

				List<Path> files = Files.list(reftableDir.toPath())
						.collect(Collectors.toList());
				for (int j = 0; j < files.size(); j++) {
					Path f = files.get(j);
					Path fileName = f.getFileName();
					if (fileName != null
							&& fileName.toString().endsWith(".ref")) {
						Files.delete(f);
						break outer;
					}
				}
			}
		}
		assertThrows(FileNotFoundException.class,
				() -> new FileReftableStack(new File(reftableDir, "refs"),
						reftableDir, null, () -> new Config()));
	}

