	/**
	 * Deletes orphans
	 * <p>
	 * A file is considered an orphan if it is either a "bitmap" or an index
	 * file, and its corresponding pack file is missing in the list.
	 * </p>
	 */
	private void deleteOrphans() {
		Path packDir = repo.getObjectDatabase().getPackDirectory().toPath();
		List<String> fileNames = null;
		try (Stream<Path> files = Files.list(packDir)) {
			fileNames = files.map(path -> path.getFileName().toString())
					.filter(name -> (name.endsWith(PACK_EXT)
							|| name.endsWith(BITMAP_EXT)
							|| name.endsWith(INDEX_EXT)
							|| name.endsWith(KEEP_EXT)))
					// sort files with same base name in the order:
					// .pack, .keep, .index, .bitmap to avoid look ahead
					.sorted(Collections.reverseOrder())
					.collect(Collectors.toList());
		} catch (IOException e) {
			LOG.error(e.getMessage(), e);
			return;
		}
		if (fileNames == null) {
			return;
		}

		String latestId = null;
		for (String n : fileNames) {
			PackFile pf = new PackFile(packDir.toFile(), n);
			PackExt ext = pf.getPackExt();
			if (ext.equals(PACK) || ext.equals(KEEP)) {
				latestId = pf.getId();
			}
			if (latestId == null || !pf.getId().equals(latestId)) {
				// no pack or keep for this id
				try {
					FileUtils.delete(pf,
							FileUtils.RETRY | FileUtils.SKIP_MISSING);
					LOG.warn(JGitText.get().deletedOrphanInPackDir, pf);
				} catch (IOException e) {
					LOG.error(e.getMessage(), e);
				}
			}
		}
	}

