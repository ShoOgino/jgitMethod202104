	/**
	 * Returns refs whose names start with a given prefix excluding all refs that
	 * start with one of the given prefixes.
	 *
	 * @param include string that names of refs should start with; may be empty.
	 * @param excludes strings that names of refs can't start with; may be empty.
	 * @return immutable list of refs whose names start with {@code include} and
	 *         none of the strings in {@code exclude}.
	 * @throws java.io.IOException the reference space cannot be accessed.
	 */
	public List<Ref> getRefsByPrefixWithExclusions(String include, Set<String> excludes) throws IOException {
		if (excludes.isEmpty()) {
			return getRefsByPrefix(include);
		}
		List<Ref> results = new ArrayList<>();
		lock.lock();
		try {
			Reftable table = reader();
			Iterator<String> excludeIterator =
					excludes.stream().sorted().collect(Collectors.toList()).iterator();
			String currentExclusion = excludeIterator.hasNext() ? excludeIterator.next() : null;
			try (RefCursor rc = RefDatabase.ALL.equals(include) ? table.allRefs() : table.seekRefsWithPrefix(include)) {
				while (rc.next()) {
					Ref ref = table.resolve(rc.getRef());
					if (ref == null || ref.getObjectId() == null) {
						continue;
					}
					// Skip prefixes that will never see since we are already further than those
					// prefixes lexicographically.
					while (excludeIterator.hasNext() && !ref.getName().startsWith(currentExclusion)
							&& ref.getName().compareTo(currentExclusion) > 0) {
						currentExclusion = excludeIterator.next();
					}

					if (currentExclusion != null && ref.getName().startsWith(currentExclusion)) {
						rc.seekPastPrefix(currentExclusion);
						continue;
					}
					results.add(ref);
				}
			}
		} finally {
			lock.unlock();
		}

		return Collections.unmodifiableList(results);
	}

