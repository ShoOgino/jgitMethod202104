	private void negotiate(ProgressMonitor monitor) throws IOException,
			CancelledException {
		final MutableObjectId ackId = new MutableObjectId();
		int resultsPending = 0;
		int havesSent = 0;
		int havesSinceLastContinue = 0;
		boolean receivedContinue = false;
		boolean receivedAck = false;
		boolean receivedReady = false;
		boolean needsAcknowledgementV2 = true;

		if (statelessRPC) {
			state.writeTo(out, null);
		}

		negotiateBegin();
		SEND_HAVES: for (;;) {
			final RevCommit c = walk.next();
			if (c == null) {
				break SEND_HAVES;
			}

			ObjectId o = c.getId();
			pckOut.writeString("have " + o.name() + '\n'); //$NON-NLS-1$
			havesSent++;
			havesSinceLastContinue++;

			if ((31 & havesSent) != 0) {
				// We group the have lines into blocks of 32, each marked
				// with a flush (aka end). This one is within a block so
				// continue with another have line.
				//
				continue;
			}

			if (monitor.isCancelled()) {
				throw new CancelledException();
			}

			pckOut.end();
			outNeedsEnd = false;
			resultsPending++; // Each end will cause a result to come back.

			if (havesSent == 32 && !statelessRPC) {
				// On the first block we race ahead and try to send
				// more of the second block while waiting for the
				// remote to respond to our first block request.
				// This keeps us one block ahead of the peer.
				//
				continue;
			}

			// Read the section header
			if (needsAcknowledgementV2 && TransferConfig.ProtocolVersion.V2
					.equals(getProtocolVersion())) {
				String header = pckIn.readString();
				if (!GitProtocolConstants.SECTION_ACKNOWLEDGMENTS
						.equals(header)) {
					throw new PackProtocolException(MessageFormat.format(
							JGitText.get().expectedGot,
							GitProtocolConstants.SECTION_ACKNOWLEDGMENTS,
							header));
				}
				needsAcknowledgementV2 = false;
			}
			READ_RESULT: for (;;) {
				AckNackResult anr = pckIn.readACKorEOF(ackId);
				switch (anr) {
				case ACK_EOF:
					if (TransferConfig.ProtocolVersion.V0
							.equals(getProtocolVersion())) {
						throw new PackProtocolException(
								JGitText.get().expectedACKNAKFoundEOF);
					}
					// More lines needed
					resultsPending--;
					break READ_RESULT;

				case NAK:
					// More have lines are necessary to compute the
					// pack on the remote side. Keep doing that.
					//
					resultsPending--;
					break READ_RESULT;

				case ACK:
					if (TransferConfig.ProtocolVersion.V0
							.equals(getProtocolVersion())) {
						// The remote side is happy and knows exactly what
						// to send us. There is no further negotiation and
						// we can break out immediately.
						//
						multiAck = MultiAck.OFF;
						resultsPending = 0;
						receivedAck = true;
						if (statelessRPC) {
							state.writeTo(out, null);
						}
						break SEND_HAVES;
					}
					// Keep on reading ACKs until we get the ACK_READY
					markCommon(walk.parseAny(ackId), AckNackResult.ACK_COMMON);
					receivedAck = true;
					break;

				case ACK_CONTINUE:
				case ACK_COMMON:
				case ACK_READY:
					// The server knows this commit (ackId). We don't
					// need to send any further along its ancestry, but
					// we need to continue to talk about other parts of
					// our local history.
					//
					markCommon(walk.parseAny(ackId), anr);
					receivedAck = true;
					receivedContinue = true;
					havesSinceLastContinue = 0;
					if (anr == AckNackResult.ACK_READY) {
						receivedReady = true;
						if (TransferConfig.ProtocolVersion.V2
								.equals(getProtocolVersion())) {
							multiAck = MultiAck.OFF;
							resultsPending = 0;
							break SEND_HAVES;
						}
					}
					break;
				}

				if (monitor.isCancelled()) {
					throw new CancelledException();
				}
			}

			if (noDone && receivedReady) {
				break SEND_HAVES;
			}
			if (statelessRPC) {
				state.writeTo(out, null);
			}

			if ((receivedContinue && havesSinceLastContinue > MAX_HAVES)
					|| havesSent >= maxHaves) {
				// Our history must be really different from the remote's.
				// We just sent a whole slew of have lines, and it did not
				// recognize any of them. Avoid sending our entire history
				// to them by giving up early.
				//
				break SEND_HAVES;
			}
		}

		// Tell the remote side we have run out of things to talk about.
		//
		if (monitor.isCancelled()) {
			throw new CancelledException();
		}

		if (receivedReady && TransferConfig.ProtocolVersion.V2
				.equals(getProtocolVersion())) {
			// We'll get the packfile right away. Skip the delimiter.
			String delim = pckIn.readString();
			if (!PacketLineIn.isDelimiter(delim)) {
				throw new PackProtocolException(MessageFormat
						.format(JGitText.get().expectedGot, "0001", delim)); //$NON-NLS-1$
			}
			return;
		}
		if (!receivedReady || !noDone) {
			// When statelessRPC is true we should always leave SEND_HAVES
			// loop above while in the middle of a request. This allows us
			// to just write done immediately.
			//
			pckOut.writeString("done\n"); //$NON-NLS-1$
			if (TransferConfig.ProtocolVersion.V2
					.equals(getProtocolVersion())) {
				pckOut.end();
				outNeedsEnd = false;
				pckOut.flush();
				// Protocol V2 will skip acknowledgments completely if we send
				// a done.
				return;
			}
			pckOut.flush();
		}

		// Below is protocol V0 only.

		if (!receivedAck) {
			// Apparently if we have never received an ACK earlier
			// there is one more result expected from the done we
			// just sent to the remote.
			//
			multiAck = MultiAck.OFF;
			resultsPending++;
		}

		READ_RESULT: while (resultsPending > 0 || multiAck != MultiAck.OFF) {
			final AckNackResult anr = pckIn.readACK(ackId);
			resultsPending--;
			switch (anr) {
			case NAK:
				// A NAK is a response to an end we queued earlier
				// we eat it and look for another ACK/NAK message.
				//
				break;

			case ACK_EOF:
				if (TransferConfig.ProtocolVersion.V0
						.equals(getProtocolVersion())) {
					throw new PackProtocolException(
							JGitText.get().expectedACKNAKFoundEOF);
				}
				break READ_RESULT;

			case ACK:
				// A solitary ACK at this point means the remote won't
				// speak anymore, but is going to send us a pack now.
				//
				break READ_RESULT;

			case ACK_CONTINUE:
			case ACK_COMMON:
				// We will expect a normal ACK to break out of the loop.
				//
				multiAck = MultiAck.CONTINUE;
				break;

			case ACK_READY:
				if (TransferConfig.ProtocolVersion.V2
						.equals(getProtocolVersion())) {
					break READ_RESULT;
				}
				// We will expect a normal ACK to break out of the loop.
				//
				multiAck = MultiAck.CONTINUE;
				break;
			}

			if (monitor.isCancelled()) {
				throw new CancelledException();
			}
		}
	}

