	AckNackResult readACKorEOF(MutableObjectId returnedId) throws IOException {
		final String line = readString();
		if (line.length() == 0)
			return AckNackResult.ACK_EOF;
		if ("NAK".equals(line)) //$NON-NLS-1$
			return AckNackResult.NAK;
		if ("ready".equals(line)) { //$NON-NLS-1$
			// Protocol V2
			return AckNackResult.ACK_READY;
		}
		if (line.startsWith("ACK ")) { //$NON-NLS-1$
			returnedId.fromString(line.substring(4, 44));
			if (line.length() == 44)
				return AckNackResult.ACK;

			final String arg = line.substring(44);
			switch (arg) {
			case " continue": //$NON-NLS-1$
				return AckNackResult.ACK_CONTINUE;
			case " common": //$NON-NLS-1$
				return AckNackResult.ACK_COMMON;
			case " ready": //$NON-NLS-1$
				return AckNackResult.ACK_READY;
			default:
				break;
			}
		}
		if (line.startsWith("ERR ")) //$NON-NLS-1$
			throw new PackProtocolException(line.substring(4));
		throw new PackProtocolException(MessageFormat.format(JGitText.get().expectedACKNAKGot, line));
	}

