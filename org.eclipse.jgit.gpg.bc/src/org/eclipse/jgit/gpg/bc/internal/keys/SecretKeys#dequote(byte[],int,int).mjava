	/**
	 * GPG-style string de-quoting, which is basically C-style, with some
	 * literal CR/LF escaping.
	 *
	 * @param in
	 *            buffer containing the quoted string
	 * @param from
	 *            index after the opening quote in {@code in}
	 * @param to
	 *            index of the closing quote in {@code in}
	 * @return the dequoted raw string value
	 * @throws StreamCorruptedException
	 */
	private static byte[] dequote(byte[] in, int from, int to)
			throws StreamCorruptedException {
		// Result must be shorter or have the same length
		byte[] out = new byte[to - from];
		int j = 0;
		int i = from;
		while (i < to) {
			byte b = in[i++];
			if (b != '\\') {
				out[j++] = b;
				continue;
			}
			if (i == to) {
				throw new StreamCorruptedException(
						BCText.get().sexprStringInvalidEscapeAtEnd);
			}
			b = in[i++];
			switch (b) {
			case 'b':
				out[j++] = '\b';
				break;
			case 'f':
				out[j++] = '\f';
				break;
			case 'n':
				out[j++] = '\n';
				break;
			case 'r':
				out[j++] = '\r';
				break;
			case 't':
				out[j++] = '\t';
				break;
			case 'v':
				out[j++] = 0x0B;
				break;
			case '"':
			case '\'':
			case '\\':
				out[j++] = b;
				break;
			case '\r':
				// Escaped literal line end. If an LF is following, skip that,
				// too.
				if (i < to && in[i] == '\n') {
					i++;
				}
				break;
			case '\n':
				// Same for LF possibly followed by CR.
				if (i < to && in[i] == '\r') {
					i++;
				}
				break;
			case 'x':
				if (i + 1 >= to || !isHex(in[i]) || !isHex(in[i + 1])) {
					throw new StreamCorruptedException(
							BCText.get().sexprStringInvalidHexEscape);
				}
				out[j++] = (byte) ((nibble(in[i]) << 4) | nibble(in[i + 1]));
				i += 2;
				break;
			case '0':
			case '1':
			case '2':
			case '3':
				if (i + 2 >= to || !isOctal(in[i]) || !isOctal(in[i + 1])
						|| !isOctal(in[i + 2])) {
					throw new StreamCorruptedException(
							BCText.get().sexprStringInvalidOctalEscape);
				}
				out[j++] = (byte) (((((in[i] - '0') << 3)
						| (in[i + 1] - '0')) << 3) | (in[i + 2] - '0'));
				i += 3;
				break;
			default:
				throw new StreamCorruptedException(MessageFormat.format(
						BCText.get().sexprStringInvalidEscape,
						Integer.toHexString(b & 0xFF)));
			}
		}
		return Arrays.copyOf(out, j);
	}

