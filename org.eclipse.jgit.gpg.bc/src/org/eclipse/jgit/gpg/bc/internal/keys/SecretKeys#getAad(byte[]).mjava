	/**
	 * Extract the AAD for the OCB decryption from an s-expression.
	 *
	 * @param sExp
	 *            buffer containing a valid binary s-expression
	 * @return the AAD
	 */
	private static byte[] getAad(byte[] sExp) {
		// Given a key
		// @formatter:off
		// (protected-private-key (rsa ... (protected openpgp-s2k3-ocb-aes ... )(protected-at ...)))
		//                        A        B                                    C                  D
		// The AAD is [A..B)[C..D). (From the binary serialized form.)
		// @formatter:on
		int i = 1; // Skip initial '('
		while (sExp[i] != '(') {
			i++;
		}
		int aadStart = i++;
		int aadEnd = skip(sExp, aadStart);
		byte[] protectedPrefix = "(9:protected" //$NON-NLS-1$
				.getBytes(StandardCharsets.US_ASCII);
		while (!matches(sExp, i, protectedPrefix)) {
			i++;
		}
		int protectedStart = i;
		int protectedEnd = skip(sExp, protectedStart);
		byte[] aadData = new byte[aadEnd - aadStart
				- (protectedEnd - protectedStart)];
		System.arraycopy(sExp, aadStart, aadData, 0, protectedStart - aadStart);
		System.arraycopy(sExp, protectedEnd, aadData, protectedStart - aadStart,
				aadEnd - protectedEnd);
		return aadData;
	}

