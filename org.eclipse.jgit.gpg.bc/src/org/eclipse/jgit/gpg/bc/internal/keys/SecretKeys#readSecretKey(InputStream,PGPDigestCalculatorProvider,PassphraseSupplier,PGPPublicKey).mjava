	/**
	 * Reads a GPG secret key from the given stream.
	 *
	 * @param in
	 *            {@link InputStream} to read from, doesn't need to be buffered
	 * @param calculatorProvider
	 *            for checking digests
	 * @param passphraseSupplier
	 *            for decrypting encrypted keys
	 * @param publicKey
	 *            the secret key should be for
	 * @return the secret key
	 * @throws IOException
	 *             if the stream cannot be parsed
	 * @throws PGPException
	 *             if thrown by the underlying S-Expression parser, for instance
	 *             when the passphrase is wrong
	 * @throws CanceledException
	 *             if thrown by the {@code passphraseSupplier}
	 * @throws UnsupportedCredentialItem
	 *             if thrown by the {@code passphraseSupplier}
	 * @throws URISyntaxException
	 *             if thrown by the {@code passphraseSupplier}
	 */
	public static PGPSecretKey readSecretKey(InputStream in,
			PGPDigestCalculatorProvider calculatorProvider,
			PassphraseSupplier passphraseSupplier, PGPPublicKey publicKey)
			throws IOException, PGPException, CanceledException,
			UnsupportedCredentialItem, URISyntaxException {
		byte[] data = Streams.readAll(in);
		if (data.length == 0) {
			throw new EOFException();
		} else if (data.length < 4 + PROTECTED_KEY.length) {
			// +4 for "(21:" for a binary protected key
			throw new IOException(
					MessageFormat.format(BCText.get().secretKeyTooShort,
							Integer.toUnsignedString(data.length)));
		}
		SExprParser parser = new SExprParser(calculatorProvider);
		byte firstChar = data[0];
		try {
			if (firstChar == '(') {
				// Binary format.
				PBEProtectionRemoverFactory decryptor = null;
				if (matches(data, 4, PROTECTED_KEY)) {
					// AES/CBC encrypted.
					decryptor = new JcePBEProtectionRemoverFactory(
							passphraseSupplier.getPassphrase(),
							calculatorProvider);
				}
				try (InputStream sIn = new ByteArrayInputStream(data)) {
					return parser.parseSecretKey(sIn, decryptor, publicKey);
				}
			}
			// Assume it's the new key-value format.
			try (ByteArrayInputStream keyIn = new ByteArrayInputStream(data)) {
				byte[] rawData = keyFromNameValueFormat(keyIn);
				if (!matches(rawData, 1, PROTECTED_KEY)) {
					// Not encrypted human-readable format.
					try (InputStream sIn = new ByteArrayInputStream(
							convertSexpression(rawData))) {
						return parser.parseSecretKey(sIn, null, publicKey);
					}
				}
				// An encrypted key from a key-value file. Most likely AES/OCB
				// encrypted.
				boolean isOCB[] = { false };
				byte[] sExp = convertSexpression(rawData, isOCB);
				PBEProtectionRemoverFactory decryptor;
				if (isOCB[0]) {
					decryptor = new OCBPBEProtectionRemoverFactory(
							passphraseSupplier.getPassphrase(),
							calculatorProvider, getAad(sExp));
				} else {
					decryptor = new JcePBEProtectionRemoverFactory(
							passphraseSupplier.getPassphrase(),
							calculatorProvider);
				}
				try (InputStream sIn = new ByteArrayInputStream(sExp)) {
					return parser.parseSecretKey(sIn, decryptor, publicKey);
				}
			}
		} catch (IOException e) {
			throw new PGPException(e.getLocalizedMessage(), e);
		}
	}

