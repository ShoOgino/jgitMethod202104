	private BigInteger[] processRSASecretKey(InputStream inputStream,
			BigInteger n, BigInteger e,
			PBEProtectionRemoverFactory keyProtectionRemoverFactory)
			throws IOException, PGPException {
		String type;
		byte[][] basicData = extractData(inputStream,
				keyProtectionRemoverFactory);

		byte[] keyData;
		byte[] protectedAt = null;

		InputStream keyIn;
		BigInteger d;

		if (basicData == null) {
			keyIn = inputStream;
			byte[] nBytes = SXprUtils.readBytes(inputStream,
					inputStream.read());
			d = new BigInteger(1, nBytes);

			SXprUtils.skipCloseParenthesis(inputStream);

		} else {
			keyData = basicData[0];
			protectedAt = basicData[1];

			keyIn = new ByteArrayInputStream(keyData);

			SXprUtils.skipOpenParenthesis(keyIn);
			SXprUtils.skipOpenParenthesis(keyIn);
			d = readBigInteger("d", keyIn);
		}

		//
		// parse the secret key S-expr
		//

		BigInteger p = readBigInteger("p", keyIn);
		BigInteger q = readBigInteger("q", keyIn);
		BigInteger u = readBigInteger("u", keyIn);

		// JGit modification: OCB-encrypted keys don't have and don't need a
		// hash
		if (basicData == null
				|| keyProtectionRemoverFactory instanceof OCBPBEProtectionRemoverFactory) {
			return new BigInteger[] { d, p, q, u };
		}

		SXprUtils.skipCloseParenthesis(keyIn);

		SXprUtils.skipOpenParenthesis(keyIn);
		type = SXprUtils.readString(keyIn, keyIn.read());

		if (!type.equals("hash")) {
			throw new PGPException("hash keyword expected");
		}
		type = SXprUtils.readString(keyIn, keyIn.read());

		if (!type.equals("sha1")) {
			throw new PGPException("hash keyword expected");
		}

		byte[] hashBytes = SXprUtils.readBytes(keyIn, keyIn.read());

		SXprUtils.skipCloseParenthesis(keyIn);

		if (digestProvider != null) {
			PGPDigestCalculator digestCalculator = digestProvider
					.get(HashAlgorithmTags.SHA1);

			OutputStream dOut = digestCalculator.getOutputStream();

			dOut.write(Strings.toByteArray("(3:rsa"));

			writeCanonical(dOut, "n", n);
			writeCanonical(dOut, "e", e);
			writeCanonical(dOut, "d", d);
			writeCanonical(dOut, "p", p);
			writeCanonical(dOut, "q", q);
			writeCanonical(dOut, "u", u);

			// check protected-at
			if (protectedAt != null) {
				dOut.write(protectedAt);
			}

			dOut.write(Strings.toByteArray(")"));

			byte[] check = digestCalculator.getDigest();

			if (!Arrays.constantTimeAreEqual(check, hashBytes)) {
				throw new PGPException(
						"checksum on protected data failed in SExpr");
			}
		}

		return new BigInteger[] { d, p, q, u };
	}

