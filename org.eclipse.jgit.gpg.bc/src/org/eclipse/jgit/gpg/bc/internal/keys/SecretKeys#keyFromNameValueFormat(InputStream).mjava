	/**
	 * Extracts the key from a GPG name-value-pair key file.
	 * <p>
	 * Package-visible for tests only.
	 * </p>
	 *
	 * @param in
	 *            {@link InputStream} to read from; should be buffered
	 * @return the raw key data as extracted from the file
	 * @throws IOException
	 *             if the {@code in} stream cannot be read or does not contain a
	 *             key
	 */
	static byte[] keyFromNameValueFormat(InputStream in) throws IOException {
		// It would be nice if we could use RawParseUtils here, but GPG compares
		// names case-insensitively. We're only interested in the "Key:"
		// name-value pair.
		int[] nameLow = { 'k', 'e', 'y', ':' };
		int[] nameCap = { 'K', 'E', 'Y', ':' };
		int nameIdx = 0;
		for (;;) {
			int next = in.read();
			if (next < 0) {
				throw new EOFException();
			}
			if (next == '\n') {
				nameIdx = 0;
			} else if (nameIdx >= 0) {
				if (nameLow[nameIdx] == next || nameCap[nameIdx] == next) {
					nameIdx++;
					if (nameIdx == nameLow.length) {
						break;
					}
				} else {
					nameIdx = -1;
				}
			}
		}
		// We're after "Key:". Read the value as continuation lines.
		int last = ':';
		byte[] rawData;
		try (ByteArrayOutputStream out = new ByteArrayOutputStream(8192)) {
			for (;;) {
				int next = in.read();
				if (next < 0) {
					break;
				}
				if (last == '\n') {
					if (next == ' ' || next == '\t') {
						// Continuation line; skip this whitespace
						last = next;
						continue;
					}
					break; // Not a continuation line
				}
				out.write(next);
				last = next;
			}
			rawData = out.toByteArray();
		}
		// GPG trims off trailing whitespace, and a line having only whitespace
		// is a single LF.
		try (ByteArrayOutputStream out = new ByteArrayOutputStream(
				rawData.length)) {
			int lineStart = 0;
			boolean trimLeading = true;
			while (lineStart < rawData.length) {
				int nextLineStart = RawParseUtils.nextLF(rawData, lineStart);
				if (trimLeading) {
					while (lineStart < nextLineStart
							&& isGpgSpace(rawData[lineStart])) {
						lineStart++;
					}
				}
				// Trim trailing
				int i = nextLineStart - 1;
				while (lineStart < i && isGpgSpace(rawData[i])) {
					i--;
				}
				if (i <= lineStart) {
					// Empty line signifies LF
					out.write('\n');
					trimLeading = true;
				} else {
					out.write(rawData, lineStart, i - lineStart + 1);
					trimLeading = false;
				}
				lineStart = nextLineStart;
			}
			return out.toByteArray();
		}
	}

