	/**
	 * Converts a human-readable serialized s-expression into a binary
	 * serialized s-expression.
	 *
	 * @param humanForm
	 *            to convert
	 * @param isOCB
	 *            returns whether the s-expression specified AES/OCB encryption
	 * @return the converted s-expression
	 * @throws IOException
	 *             if the conversion fails
	 */
	private static byte[] convertSexpression(byte[] humanForm, boolean[] isOCB)
			throws IOException {
		int pos = 0;
		try (ByteArrayOutputStream out = new ByteArrayOutputStream(
				humanForm.length)) {
			while (pos < humanForm.length) {
				byte b = humanForm[pos];
				if (b == '(' || b == ')') {
					out.write(b);
					pos++;
				} else if (isGpgSpace(b)) {
					pos++;
				} else if (b == '#') {
					// Hex value follows up to the next #
					int i = ++pos;
					while (i < humanForm.length && isHex(humanForm[i])) {
						i++;
					}
					if (i == pos || humanForm[i] != '#') {
						throw new StreamCorruptedException(
								BCText.get().sexprHexNotClosed);
					}
					if ((i - pos) % 2 != 0) {
						throw new StreamCorruptedException(
								BCText.get().sexprHexOdd);
					}
					int l = (i - pos) / 2;
					out.write(Integer.toString(l)
							.getBytes(StandardCharsets.US_ASCII));
					out.write(':');
					while (pos < i) {
						int x = (nibble(humanForm[pos]) << 4)
								| nibble(humanForm[pos + 1]);
						pos += 2;
						out.write(x);
					}
					pos = i + 1;
				} else if (isTokenChar(b)) {
					// Scan the token
					int start = pos++;
					while (pos < humanForm.length
							&& isTokenChar(humanForm[pos])) {
						pos++;
					}
					int l = pos - start;
					if (pos - start == OCB_PROTECTED.length
							&& matches(humanForm, start, OCB_PROTECTED)) {
						isOCB[0] = true;
					}
					out.write(Integer.toString(l)
							.getBytes(StandardCharsets.US_ASCII));
					out.write(':');
					out.write(humanForm, start, pos - start);
				} else if (b == '"') {
					// Potentially quoted string.
					int start = ++pos;
					boolean escaped = false;
					while (pos < humanForm.length
							&& (escaped || humanForm[pos] != '"')) {
						int ch = humanForm[pos++];
						escaped = !escaped && ch == '\\';
					}
					if (pos >= humanForm.length) {
						throw new StreamCorruptedException(
								BCText.get().sexprStringNotClosed);
					}
					// start is on the first character of the string, pos on the
					// closing quote.
					byte[] dq = dequote(humanForm, start, pos);
					out.write(Integer.toString(dq.length)
							.getBytes(StandardCharsets.US_ASCII));
					out.write(':');
					out.write(dq);
					pos++;
				} else {
					throw new StreamCorruptedException(
							MessageFormat.format(BCText.get().sexprUnhandled,
									Integer.toHexString(b & 0xFF)));
				}
			}
			return out.toByteArray();
		}
	}

